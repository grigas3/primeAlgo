function data = importSmartInsole(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   EL0012TUG1 = IMPORTFILE(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   EL0012TUG1 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   el0012tug1 = importfile('el001_2tug1.csv', 2, 2233);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2023/08/04 09:50:02

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: double (%f)
%   column23: double (%f)
%	column24: double (%f)
%   column25: double (%f)
%	column26: double (%f)
%   column27: double (%f)
%	column28: double (%f)
%   column29: double (%f)
%	column30: double (%f)
%   column31: double (%f)
%	column32: double (%f)
%   column33: double (%f)
%	column34: double (%f)
%   column35: double (%f)
%	column36: double (%f)
%   column37: double (%f)
%	column38: double (%f)
%   column39: double (%f)
%	column40: double (%f)
%   column41: double (%f)
%	column42: double (%f)
%   column43: double (%f)
%	column44: double (%f)
%   column45: double (%f)
%	column46: double (%f)
%   column47: double (%f)
%	column48: double (%f)
%   column49: double (%f)
%	column50: double (%f)
%   column51: double (%f)
%	column52: categorical (%C)
%   column53: categorical (%C)
%	column54: categorical (%C)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%C%C%C%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
data = table(dataArray{1:end-1}, 'VariableNames', {'x_Time','leftPressure1_N_cm__','leftPressure2_N_cm__','leftPressure3_N_cm__','leftPressure4_N_cm__','leftPressure5_N_cm__','leftPressure6_N_cm__','leftPressure7_N_cm__','leftPressure8_N_cm__','leftPressure9_N_cm__','leftPressure10_N_cm__','leftPressure11_N_cm__','leftPressure12_N_cm__','leftPressure13_N_cm__','leftPressure14_N_cm__','leftPressure15_N_cm__','leftPressure16_N_cm__','leftAccelerationX_g_','leftAccelerationY_g_','leftAccelerationZ_g_','leftAngularX_dps_','leftAngularY_dps_','leftAngularZ_dps_','leftTotalForce_N_','leftCenterOfPressureX___','leftCenterOfPressureY___','rightPressure1_N_cm__','rightPressure2_N_cm__','rightPressure3_N_cm__','rightPressure4_N_cm__','rightPressure5_N_cm__','rightPressure6_N_cm__','rightPressure7_N_cm__','rightPressure8_N_cm__','rightPressure9_N_cm__','rightPressure10_N_cm__','rightPressure11_N_cm__','rightPressure12_N_cm__','rightPressure13_N_cm__','rightPressure14_N_cm__','rightPressure15_N_cm__','rightPressure16_N_cm__','rightAccelerationX_g_','rightAccelerationY_g_','rightAccelerationZ_g_','rightAngularX_dps_','rightAngularY_dps_','rightAngularZ_dps_','rightTotalForce_N_','rightCenterOfPressureX___','rightCenterOfPressureY___','Activity_LabelLevel1','Event_LabelLevel2_LeftFoot','Event_LabelLevel2_RightFoot'});

